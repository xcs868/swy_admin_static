# This file is a template, and might need editing before it works on your project.
# Official docker image.
stages:
  - deploy
  - auto-merge
  - cleanup_build
deploy-to-development:
  stage: deploy
  image: syngit.txxcd.com:4567/docker/deploy:latest
  environment: development
  tags:
    - hongkong
  only:
    - develop
  variables:
    IMAGE_NAME: $TENCENT_SHANGHAI_REGISTRY_IMAGE/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_BUILD_REF-$CI_PIPELINE_ID-$CI_JOB_ID
    CDREPO: git@syngit.txxcd.com:niki/cd.git
    DEPLOY_SERVICE: 1
    DEPLOY_EXECUTOR: 0
    ENV: development
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$TENCENT_SHANGHAI_REGISTRY_USER" -p "$TENCENT_SHANGHAI_REGISTRY_PASSWORD" $TENCENT_SHANGHAI_REGISTRY_IMAGE
  script:
    - pwd && ls -al
    - docker build --pull -t "$IMAGE_NAME" -f k8s/development.dockerfile .
    - echo "image build success"
    - docker push "$IMAGE_NAME"
    - echo "image push success"
    - echo "set image id for kustomize"
    - echo $CDREPO
    - cd /tmp && pwd && git clone $CDREPO && cd /tmp/cd
    - ./deploy.sh
deploy-to-test:
  stage: deploy
  image: syngit.txxcd.com:4567/docker/deploy:latest
  environment: test
  tags:
    - hongkong
  only:
    - test
  variables:
    IMAGE_NAME: $TENCENT_SHANGHAI_REGISTRY_IMAGE/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_BUILD_REF-$CI_PIPELINE_ID-$CI_JOB_ID
    CDREPO: git@syngit.txxcd.com:niki/cd.git
    DEPLOY_SERVICE: 1
    DEPLOY_EXECUTOR: 0
    ENV: test
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$TENCENT_SHANGHAI_REGISTRY_USER" -p "$TENCENT_SHANGHAI_REGISTRY_PASSWORD" $TENCENT_SHANGHAI_REGISTRY_IMAGE
  script:
    - pwd && ls -al
    - docker build --pull -t "$IMAGE_NAME" -f k8s/test.dockerfile .
    - echo "image build success"
    - docker push "$IMAGE_NAME"
    - echo "image push success"
    - echo "set image id for kustomize"
    - echo $CDREPO
    - cd /tmp && pwd && git clone $CDREPO && cd /tmp/cd
    - ./deploy.sh
deploy-to-pre:
  stage: deploy
  image: syngit.txxcd.com:4567/docker/deploy:latest
  environment: pre
  only:
    - pre
  variables:
    IMAGE_NAME: $TENCENT_REGISTRY_MAITANG/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_BUILD_REF-$CI_PIPELINE_ID-$CI_JOB_ID
    CDREPO: git@syngit.txxcd.com:niki/cd.git
    DEPLOY_SERVICE: 1
    DEPLOY_EXECUTOR: 0
    ENV: pre
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$TENCENT_SINGAPORE_REGISTRY_USER" -p "$TENCENT_SINGAPORE_REGISTRY_PASSWORD" $TENCENT_REGISTRY_MAITANG
  script:
    - pwd && ls -al
    - docker build --pull -t "$IMAGE_NAME" -f k8s/pre.dockerfile .
    - echo "image build success"
    - docker push "$IMAGE_NAME"
    - echo "image push success"
    - echo "set image id for kustomize"
    - echo $CDREPO
    - cd /tmp && pwd && git clone $CDREPO && cd /tmp/cd
    - ./deploy.sh
deploy-to-product:
  stage: deploy
  image: syngit.txxcd.com:4567/docker/deploy:latest
  environment: product
  only:
    - master
  variables:
    IMAGE_NAME: $TENCENT_REGISTRY_MAITANG/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_BUILD_REF-$CI_PIPELINE_ID-$CI_JOB_ID
    CDREPO: git@syngit.txxcd.com:niki/cd.git
    DEPLOY_SERVICE: 1
    DEPLOY_EXECUTOR: 0
    ENV: product
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$TENCENT_SINGAPORE_REGISTRY_USER" -p "$TENCENT_SINGAPORE_REGISTRY_PASSWORD" $TENCENT_REGISTRY_MAITANG
  script:
    - pwd && ls -al
    - docker build --pull -t "$IMAGE_NAME" -f k8s/product.dockerfile .
    - echo "image build success"
    - docker push "$IMAGE_NAME"
    - echo "image push success"
    - echo "set image id for kustomize"
    - echo $CDREPO
    - cd /tmp && pwd && git clone $CDREPO && cd /tmp/cd
    - ./deploy.sh
自动合并到develop分支:
  stage: auto-merge
  image: syngit.txxcd.com:4567/docker/deploy:latest
  only:
    - master
  except:
    - triggers
  variables:
    FROM: $CI_COMMIT_REF_NAME
    TO: develop
    REPO: git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
  script:
    - echo $REPO
    - cd /tmp && pwd && git clone $REPO && cd $CI_PROJECT_NAME
    - pwd && git fetch
    - git checkout -b "$FROM" origin/"$FROM" && git pull
    - git checkout -b "$TO" origin/"$TO" && git pull
    - git merge --no-ff -Xtheirs --commit --log ${FROM} -m "CI/CD:auto git merge origin/${FROM}"
    - git push
    - echo "合并成功"

代码有毒通知:
  stage: cleanup_build
  image: syngit.txxcd.com:4567/docker/deploy:latest
  except:
    - triggers
  script:
    - >-
      #curl https://oapi.dingtalk.com/robot/send?access_token=bf4bb000fd01845a6a89fda3ceb99f9b8fc91a15838cf3773d4156af87727c57 -H 'Content-Type: application/json' -d "{ \"msgtype\": \"text\", \"text\": {\"content\": \"Oops 你竟然在代码里 投毒\n相关人员:@$GITLAB_USER_NAME@$CI_DEPLOY_USER@$CI_MERGE_REQUEST_ASSIGNEES\n提交信息:$CI_COMMIT_MESSAGE\n应用：$CI_PROJECT_NAMESPACE \n项目：$CI_PROJECT_NAME\n分支：$CI_COMMIT_REF_NAME\n链接:$CI_PIPELINE_URL\"} }" || true
  when: on_failure
发布失败通知:
  stage: cleanup_build
  image: syngit.txxcd.com:4567/docker/deploy:latest
  only:
    - triggers
  script:
    - >-
      #curl https://oapi.dingtalk.com/robot/send?access_token=bf4bb000fd01845a6a89fda3ceb99f9b8fc91a15838cf3773d4156af87727c57 -H 'Content-Type: application/json' -d "{ \"msgtype\": \"text\", \"text\": {\"content\": \"Oops 你的代码发布失 败啦\n相关人员:${TESTER:@欧俊海 @赵草 @郑雨}@$GITLAB_USER_NAME@$CI_DEPLOY_USER@$CI_MERGE_REQUEST_ASSIGNEES\n提交信息:$CI_COMMIT_MESSAGE\n应用：$CI_PROJECT_NAMESPACE \n项目：$CI_PROJECT_NAME\n分支：$CI_COMMIT_REF_NAME\n链接:$CI_PIPELINE_URL\"} }" || true
  when: on_failure
